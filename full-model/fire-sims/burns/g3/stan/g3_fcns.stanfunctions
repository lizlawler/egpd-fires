functions{
#include /../../twcrps_matnorm_fcns.stanfunctions
#include /../../gpd_fcns.stanfunctions
  // custom distribution functions of EGPD
  real egpd_lpdf(real y, real sigma, real xi, real delta) {
    real alpha = 1/delta;
    real beta = 2;
    if (delta > 1e-15) {
      return log(delta) + (delta-1) * gpareto_lccdf(y | sigma, xi) + 
              gpareto_lpdf(y | sigma, xi) + 
              beta_lpdf(exp(delta * gpareto_lccdf(y | sigma, xi)) | alpha, beta);
    }
    else {
      reject("delta<=0; found delta = ", delta);
    }
  }  
  real egpd_cdf(real y, real sigma, real xi, real delta) {
    real alpha = 1/delta;
    real beta = 2;
    if (delta > 1e-15) {
      return exp(beta_lccdf(exp(delta * gpareto_lccdf(y | sigma, xi)) | alpha, beta));
    }
    else {
      reject("delta<=0; found delta = ", delta);
    }
  }
  real egpd_lcdf(real y, real sigma, real xi, real delta) {
    real alpha = 1/delta;
    real beta = 2;
    if (delta > 1e-15) {
      return beta_lccdf(exp(delta * gpareto_lccdf(y | sigma, xi)) | alpha, beta);
    }
    else {
      reject("delta<=0; found delta = ", delta);
    }
  }  
  real egpd_lccdf(real y, real sigma, real xi, real delta) {
    real alpha = 1/delta;
    real beta = 2;
    if (delta > 1e-15) {
      return beta_lcdf(exp(delta * gpareto_lccdf(y | sigma, xi)) | alpha, beta);
    }
    else {
      reject("delta<=0; found delta = ", delta);
    }
  }  

  // truncated EGPD distribution
  real egpd_trunc_lpdf(real y, real ymin, real sigma, real xi, real delta) {
    real lpdf = egpd_lpdf(y | sigma, xi, delta);
    real cst = egpd_lccdf(ymin | sigma, xi, delta);
    return lpdf - cst;
  }
  
  // probability forecast
  vector prob_forecast(int n_int, vector int_pts, real ymin, real sigma, real xi, real delta) {
    vector[n_int] pred_probs;
    real numer_cst = egpd_cdf(ymin | sigma, xi, delta);
    real denom_cst = exp(egpd_lccdf(ymin | sigma, xi, delta));
    for (n in 1:n_int) {
      real unnorm_pred_prob = egpd_cdf(int_pts[n] | sigma, xi, delta);
      pred_probs[n] = (unnorm_pred_prob - numer_cst)/denom_cst;
    }
    return pred_probs;
  }  
}