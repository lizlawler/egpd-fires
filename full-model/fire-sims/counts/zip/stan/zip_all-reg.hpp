
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace zip_all_reg_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 174> locations_array__ = 
{" (found before start of program)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 58, column 2 to column 41)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 59, column 2 to column 29)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 60, column 2 to column 30)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 61, column 2 to column 36)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 62, column 2 to column 40)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 63, column 2 to column 37)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 64, column 2 to column 43)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 67, column 2 to column 32)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 68, column 2 to column 34)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 69, column 2 to column 38)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 70, column 2 to column 40)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 71, column 2 to column 34)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 72, column 2 to column 33)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 73, column 2 to column 31)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 75, column 2 to column 28)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 76, column 2 to column 29)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 79, column 4 to column 47)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 78, column 17 to line 80, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 78, column 2 to line 80, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 83, column 4 to line 84, column 62)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 87, column 4 to column 45)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 89, column 6 to line 90, column 53)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 88, column 23 to line 91, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 88, column 4 to line 91, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 95, column 6 to column 72)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 96, column 6 to column 49)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 94, column 19 to line 97, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 94, column 4 to line 97, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 82, column 17 to line 98, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 82, column 2 to line 98, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 99, column 2 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 138, column 2 to column 37)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 139, column 2 to column 32)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 140, column 2 to column 33)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 142, column 2 to column 35)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 148, column 6 to column 64)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 149, column 6 to column 70)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 147, column 19 to line 150, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 147, column 4 to line 150, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 146, column 17 to line 151, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 146, column 2 to line 151, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 152, column 2 to column 44)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 176, column 8 to line 177, column 90)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 175, column 13 to line 178, column 7)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 172, column 8 to line 174, column 103)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 171, column 35 to line 175, column 7)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 171, column 6 to line 178, column 7)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 170, column 24 to line 179, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 170, column 4 to line 179, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 169, column 17 to line 180, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 169, column 2 to line 180, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 103, column 2 to column 37)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 106, column 2 to column 30)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 107, column 2 to column 39)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 110, column 2 to column 31)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 111, column 2 to column 34)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 115, column 4 to column 60)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 118, column 6 to column 78)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 119, column 6 to column 49)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 117, column 23 to line 120, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 117, column 4 to line 120, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 113, column 17 to line 121, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 113, column 2 to line 121, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 131, column 8 to line 132, column 73)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 130, column 13 to line 133, column 7)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 127, column 8 to line 129, column 86)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 126, column 36 to line 130, column 7)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 126, column 6 to line 133, column 7)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 125, column 25 to line 134, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 125, column 4 to line 134, column 5)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 124, column 17 to line 135, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 124, column 2 to line 135, column 3)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 15, column 2 to column 17)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 16, column 2 to column 17)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 17, column 2 to column 21)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 18, column 2 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 19, column 2 to column 22)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 22, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 22, column 18 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 22, column 25 to column 26)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 22, column 2 to column 35)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 23, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 23, column 18 to column 25)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 23, column 27 to column 28)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 23, column 2 to column 38)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 26, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 26, column 2 to column 28)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 29, column 8 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 29, column 2 to column 43)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 30, column 8 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 30, column 17 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 30, column 2 to column 47)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 33, column 8 to column 14)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 33, column 2 to column 41)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 34, column 8 to column 14)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 34, column 16 to column 17)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 34, column 2 to column 45)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 37, column 2 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 38, column 8 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 38, column 2 to column 45)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 39, column 8 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 39, column 2 to column 45)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 42, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 42, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 42, column 2 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 43, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 43, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 43, column 2 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 44, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 44, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 44, column 2 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 47, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 47, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 47, column 2 to column 21)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 48, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 48, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 48, column 2 to column 22)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 49, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 49, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 49, column 2 to column 25)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 50, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 50, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 50, column 2 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 51, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 51, column 12 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 51, column 2 to column 24)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 54, column 2 to column 12)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 55, column 2 to column 12)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 58, column 8 to column 13)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 58, column 15 to column 16)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 58, column 29 to column 30)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 59, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 59, column 18 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 59, column 21 to column 22)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 60, column 18 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 61, column 29 to column 30)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 62, column 29 to column 30)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 63, column 29 to column 30)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 64, column 32 to column 33)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 67, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 67, column 18 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 67, column 25 to column 26)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 68, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 68, column 18 to column 25)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 68, column 27 to column 28)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 69, column 18 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 70, column 18 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 71, column 9 to column 10)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 72, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 72, column 22 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 73, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 73, column 23 to column 24)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 75, column 9 to column 16)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 75, column 18 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 76, column 9 to column 16)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 76, column 18 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 138, column 8 to column 9)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 138, column 18 to column 23)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 138, column 25 to column 26)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 139, column 9 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 139, column 17 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 140, column 9 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 140, column 17 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 142, column 9 to column 15)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 142, column 17 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 3, column 4 to column 14)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 4, column 4 to column 11)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 5, column 4 to column 11)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 6, column 4 to column 19)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 7, column 4 to column 18)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 8, column 4 to line 10, column 81)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 11, column 4 to column 16)",
 " (in '../../../../../../../../gpfs/alpine1/scratch/eslawler@colostate.edu/egpd-fires/full-model/fire-sims/counts/zip/stan/zip_all-reg.stan', line 2, column 57 to line 12, column 3)"};

struct matnormal_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_eigen_matrix_dynamic<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_eigen_matrix_dynamic<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>>
  operator()(const T0__& y, const T1__& cov, const T2__& corr,
             std::ostream* pstream__) const;
};

template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>
  matnormal_lpdf(const T0__& y_arg__, const T1__& cov_arg__,
                 const T2__& corr_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& y = stan::math::to_ref(y_arg__);
    const auto& cov = stan::math::to_ref(cov_arg__);
    const auto& corr = stan::math::to_ref(corr_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lpdf = DUMMY_VAR__;
      local_scalar_t__ r = DUMMY_VAR__;
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 169;
      r = stan::math::rows(corr);
      current_statement__ = 170;
      p = stan::math::rows(cov);
      current_statement__ = 171;
      lpdf = ((((-((r * p) / 2) * stan::math::log((2 * stan::math::pi()))) -
                 ((p / 2) * stan::math::log_determinant(corr))) -
                ((r / 2) * stan::math::log_determinant(cov))) -
               (0.5 *
                 stan::math::trace(
                   stan::math::multiply(
                     stan::math::mdivide_right_spd(
                       stan::math::mdivide_left_spd(corr,
                         stan::math::transpose(y)), cov), y))));
      current_statement__ = 172;
      return lpdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>
matnormal_lpdf_functor__::operator()(const T0__& y, const T1__& cov,
                                     const T2__& corr,
                                     std::ostream* pstream__)  const
{
  return matnormal_lpdf<propto__>(y, cov, corr, pstream__);
}

 class zip_all_reg_model final : public model_base_crtp<zip_all_reg_model> {

 private:
  int R;
  int p;
  int T_all;
  int T_train;
  int T_hold;
  std::vector<Eigen::Matrix<double, -1, -1>> X_full;
  std::vector<Eigen::Matrix<double, -1, -1>> X_train;
  std::vector<double> area_offset;
  std::vector<int> idx_train_er;
  std::vector<std::vector<int>> y_train_count;
  std::vector<int> idx_hold_er;
  std::vector<std::vector<int>> y_hold_count;
  int n_edges;
  std::vector<int> node1;
  std::vector<int> node2;
  Eigen::Matrix<double, -1, -1> l3_data__;
  Eigen::Matrix<double, -1, -1> l2_data__;
  Eigen::Matrix<double, -1, -1> l1_data__;
  Eigen::Matrix<double, -1, -1> equal_data__;
  Eigen::Matrix<double, -1, -1> bp_lin_data__;
  Eigen::Matrix<double, -1, -1> bp_square_data__;
  Eigen::Matrix<double, -1, -1> bp_cube_data__;
  Eigen::Matrix<double, -1, -1> bp_quart_data__;
  int S;
  int C; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> l3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> l2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> l1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> equal{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_lin{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_square{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_cube{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_quart{nullptr, 0, 0};
 
 public:
  ~zip_all_reg_model() { }
  
  inline std::string model_name() const final { return "zip_all_reg_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = --warn-pedantic"};
  }
  
  
  zip_all_reg_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "zip_all_reg_model_namespace::zip_all_reg_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 73;
      context__.validate_dims("data initialization","R","int",
           std::vector<size_t>{});
      R = std::numeric_limits<int>::min();
      
      
      current_statement__ = 73;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 74;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      
      
      current_statement__ = 74;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 75;
      context__.validate_dims("data initialization","T_all","int",
           std::vector<size_t>{});
      T_all = std::numeric_limits<int>::min();
      
      
      current_statement__ = 75;
      T_all = context__.vals_i("T_all")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "T_all", T_all, 1);
      current_statement__ = 76;
      context__.validate_dims("data initialization","T_train","int",
           std::vector<size_t>{});
      T_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 76;
      T_train = context__.vals_i("T_train")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "T_train", T_train, 1);
      current_statement__ = 77;
      context__.validate_dims("data initialization","T_hold","int",
           std::vector<size_t>{});
      T_hold = std::numeric_limits<int>::min();
      
      
      current_statement__ = 77;
      T_hold = context__.vals_i("T_hold")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "T_hold", T_hold, 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("X_full", "R", R);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("X_full", "T_all", T_all);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("X_full", "p", p);
      current_statement__ = 81;
      context__.validate_dims("data initialization","X_full","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(T_all), static_cast<size_t>(p)});
      X_full = 
        std::vector<Eigen::Matrix<double, -1, -1>>(R, 
          Eigen::Matrix<double, -1, -1>::Constant(T_all, p,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_full_flat__;
        current_statement__ = 81;
        X_full_flat__ = context__.vals_r("X_full");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            current_statement__ = 81;
            for (int sym3__ = 1; sym3__ <= R; ++sym3__) {
              current_statement__ = 81;
              stan::model::assign(X_full, X_full_flat__[(pos__ - 1)],
                "assigning variable X_full", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 81;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 82;
      stan::math::validate_non_negative_index("X_train", "R", R);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("X_train", "T_train", T_train);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("X_train", "p", p);
      current_statement__ = 85;
      context__.validate_dims("data initialization","X_train","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(T_train), static_cast<size_t>(p)});
      X_train = 
        std::vector<Eigen::Matrix<double, -1, -1>>(R, 
          Eigen::Matrix<double, -1, -1>::Constant(T_train, p,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_train_flat__;
        current_statement__ = 85;
        X_train_flat__ = context__.vals_r("X_train");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 85;
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            current_statement__ = 85;
            for (int sym3__ = 1; sym3__ <= R; ++sym3__) {
              current_statement__ = 85;
              stan::model::assign(X_train, X_train_flat__[(pos__ - 1)],
                "assigning variable X_train", stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
              current_statement__ = 85;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 86;
      stan::math::validate_non_negative_index("area_offset", "R", R);
      current_statement__ = 87;
      context__.validate_dims("data initialization","area_offset","double",
           std::vector<size_t>{static_cast<size_t>(R)});
      area_offset = 
        std::vector<double>(R, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 87;
      area_offset = context__.vals_r("area_offset");
      current_statement__ = 88;
      stan::math::validate_non_negative_index("idx_train_er", "T_train",
                                              T_train);
      current_statement__ = 89;
      context__.validate_dims("data initialization","idx_train_er","int",
           std::vector<size_t>{static_cast<size_t>(T_train)});
      idx_train_er = 
        std::vector<int>(T_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 89;
      idx_train_er = context__.vals_i("idx_train_er");
      current_statement__ = 89;
      stan::math::check_greater_or_equal(function__, "idx_train_er",
                                            idx_train_er, 1);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("y_train_count", "T_train",
                                              T_train);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("y_train_count", "R", R);
      current_statement__ = 92;
      context__.validate_dims("data initialization","y_train_count","int",
           std::vector<size_t>{static_cast<size_t>(T_train),
            static_cast<size_t>(R)});
      y_train_count = 
        std::vector<std::vector<int>>(T_train, 
          std::vector<int>(R, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> y_train_count_flat__;
        current_statement__ = 92;
        y_train_count_flat__ = context__.vals_i("y_train_count");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 92;
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            current_statement__ = 92;
            stan::model::assign(y_train_count,
              y_train_count_flat__[(pos__ - 1)],
              "assigning variable y_train_count", stan::model::index_uni(sym2__),
                                                    stan::model::index_uni(sym1__));
            current_statement__ = 92;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "y_train_count",
                                            y_train_count, 0);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("idx_hold_er", "T_hold", T_hold);
      current_statement__ = 94;
      context__.validate_dims("data initialization","idx_hold_er","int",
           std::vector<size_t>{static_cast<size_t>(T_hold)});
      idx_hold_er = 
        std::vector<int>(T_hold, std::numeric_limits<int>::min());
      
      
      current_statement__ = 94;
      idx_hold_er = context__.vals_i("idx_hold_er");
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "idx_hold_er",
                                            idx_hold_er, 1);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("y_hold_count", "T_hold",
                                              T_hold);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("y_hold_count", "R", R);
      current_statement__ = 97;
      context__.validate_dims("data initialization","y_hold_count","int",
           std::vector<size_t>{static_cast<size_t>(T_hold),
            static_cast<size_t>(R)});
      y_hold_count = 
        std::vector<std::vector<int>>(T_hold, 
          std::vector<int>(R, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> y_hold_count_flat__;
        current_statement__ = 97;
        y_hold_count_flat__ = context__.vals_i("y_hold_count");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 97;
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            current_statement__ = 97;
            stan::model::assign(y_hold_count,
              y_hold_count_flat__[(pos__ - 1)],
              "assigning variable y_hold_count", stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
            current_statement__ = 97;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "y_hold_count",
                                            y_hold_count, 0);
      current_statement__ = 98;
      context__.validate_dims("data initialization","n_edges","int",
           std::vector<size_t>{});
      n_edges = std::numeric_limits<int>::min();
      
      
      current_statement__ = 98;
      n_edges = context__.vals_i("n_edges")[(1 - 1)];
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "n_edges", n_edges, 0);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("node1", "n_edges", n_edges);
      current_statement__ = 100;
      context__.validate_dims("data initialization","node1","int",
           std::vector<size_t>{static_cast<size_t>(n_edges)});
      node1 = std::vector<int>(n_edges, std::numeric_limits<int>::min());
      
      
      current_statement__ = 100;
      node1 = context__.vals_i("node1");
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "node1", node1, 1);
      current_statement__ = 100;
      stan::math::check_less_or_equal(function__, "node1", node1, R);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("node2", "n_edges", n_edges);
      current_statement__ = 102;
      context__.validate_dims("data initialization","node2","int",
           std::vector<size_t>{static_cast<size_t>(n_edges)});
      node2 = std::vector<int>(n_edges, std::numeric_limits<int>::min());
      
      
      current_statement__ = 102;
      node2 = context__.vals_i("node2");
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "node2", node2, 1);
      current_statement__ = 102;
      stan::math::check_less_or_equal(function__, "node2", node2, R);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("l3", "R", R);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("l3", "R", R);
      current_statement__ = 105;
      context__.validate_dims("data initialization","l3","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(R)});
      l3_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(R, R,
          std::numeric_limits<double>::quiet_NaN());
      new (&l3) Eigen::Map<Eigen::Matrix<double, -1, -1>>(l3_data__.data(), R, R);
        
      
      {
        std::vector<local_scalar_t__> l3_flat__;
        current_statement__ = 105;
        l3_flat__ = context__.vals_r("l3");
        current_statement__ = 105;
        pos__ = 1;
        current_statement__ = 105;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 105;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 105;
            stan::model::assign(l3, l3_flat__[(pos__ - 1)],
              "assigning variable l3", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 105;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 106;
      stan::math::validate_non_negative_index("l2", "R", R);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("l2", "R", R);
      current_statement__ = 108;
      context__.validate_dims("data initialization","l2","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(R)});
      l2_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(R, R,
          std::numeric_limits<double>::quiet_NaN());
      new (&l2) Eigen::Map<Eigen::Matrix<double, -1, -1>>(l2_data__.data(), R, R);
        
      
      {
        std::vector<local_scalar_t__> l2_flat__;
        current_statement__ = 108;
        l2_flat__ = context__.vals_r("l2");
        current_statement__ = 108;
        pos__ = 1;
        current_statement__ = 108;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 108;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 108;
            stan::model::assign(l2, l2_flat__[(pos__ - 1)],
              "assigning variable l2", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 108;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 109;
      stan::math::validate_non_negative_index("l1", "R", R);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("l1", "R", R);
      current_statement__ = 111;
      context__.validate_dims("data initialization","l1","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(R)});
      l1_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(R, R,
          std::numeric_limits<double>::quiet_NaN());
      new (&l1) Eigen::Map<Eigen::Matrix<double, -1, -1>>(l1_data__.data(), R, R);
        
      
      {
        std::vector<local_scalar_t__> l1_flat__;
        current_statement__ = 111;
        l1_flat__ = context__.vals_r("l1");
        current_statement__ = 111;
        pos__ = 1;
        current_statement__ = 111;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 111;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 111;
            stan::model::assign(l1, l1_flat__[(pos__ - 1)],
              "assigning variable l1", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 111;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 112;
      stan::math::validate_non_negative_index("equal", "p", p);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("equal", "p", p);
      current_statement__ = 114;
      context__.validate_dims("data initialization","equal","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      equal_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&equal) Eigen::Map<Eigen::Matrix<double, -1, -1>>(equal_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> equal_flat__;
        current_statement__ = 114;
        equal_flat__ = context__.vals_r("equal");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 114;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 114;
            stan::model::assign(equal, equal_flat__[(pos__ - 1)],
              "assigning variable equal", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 114;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 115;
      stan::math::validate_non_negative_index("bp_lin", "p", p);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("bp_lin", "p", p);
      current_statement__ = 117;
      context__.validate_dims("data initialization","bp_lin","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_lin_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_lin) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_lin_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_lin_flat__;
        current_statement__ = 117;
        bp_lin_flat__ = context__.vals_r("bp_lin");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 117;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 117;
            stan::model::assign(bp_lin, bp_lin_flat__[(pos__ - 1)],
              "assigning variable bp_lin", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 117;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 118;
      stan::math::validate_non_negative_index("bp_square", "p", p);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("bp_square", "p", p);
      current_statement__ = 120;
      context__.validate_dims("data initialization","bp_square","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_square_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_square) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_square_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_square_flat__;
        current_statement__ = 120;
        bp_square_flat__ = context__.vals_r("bp_square");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 120;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 120;
            stan::model::assign(bp_square, bp_square_flat__[(pos__ - 1)],
              "assigning variable bp_square", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 120;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 121;
      stan::math::validate_non_negative_index("bp_cube", "p", p);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("bp_cube", "p", p);
      current_statement__ = 123;
      context__.validate_dims("data initialization","bp_cube","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_cube_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_cube) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_cube_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_cube_flat__;
        current_statement__ = 123;
        bp_cube_flat__ = context__.vals_r("bp_cube");
        current_statement__ = 123;
        pos__ = 1;
        current_statement__ = 123;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 123;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 123;
            stan::model::assign(bp_cube, bp_cube_flat__[(pos__ - 1)],
              "assigning variable bp_cube", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
            current_statement__ = 123;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 124;
      stan::math::validate_non_negative_index("bp_quart", "p", p);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("bp_quart", "p", p);
      current_statement__ = 126;
      context__.validate_dims("data initialization","bp_quart","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_quart_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_quart) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_quart_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_quart_flat__;
        current_statement__ = 126;
        bp_quart_flat__ = context__.vals_r("bp_quart");
        current_statement__ = 126;
        pos__ = 1;
        current_statement__ = 126;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 126;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 126;
            stan::model::assign(bp_quart, bp_quart_flat__[(pos__ - 1)],
              "assigning variable bp_quart", stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
            current_statement__ = 126;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 127;
      S = std::numeric_limits<int>::min();
      
      
      current_statement__ = 127;
      S = 2;
      current_statement__ = 128;
      C = std::numeric_limits<int>::min();
      
      
      current_statement__ = 128;
      C = 2;
      current_statement__ = 129;
      stan::math::validate_non_negative_index("phi_init", "T_all", T_all);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("phi_init", "S", S);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("phi_init", "R", R);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("beta", "S", S);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("beta", "p", p);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("beta", "R", R);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("tau_init", "S", S);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("eta", "S", S);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("bp_init", "S", S);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("rho1", "C", C);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("rho_sum", "C", C);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("phi", "S", S);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("phi", "T_all", T_all);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("phi", "R", R);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("reg", "S", S);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("reg", "T_train", T_train);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("reg", "R", R);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("bp", "S", S);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("tau", "S", S);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("rho2", "C", C);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("cov_ar1", "S", S);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("cov_ar1", "p", p);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("cov_ar1", "p", p);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("corr", "C", C);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("corr", "R", R);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("corr", "R", R);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("lambda", "T_train", T_train);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("lambda", "R", R);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("pi_prob", "T_train", T_train);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("pi_prob", "R", R);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("reg_full", "S", S);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("reg_full", "T_all", T_all);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("reg_full", "R", R);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("lambda_hold", "T_hold", T_hold);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("lambda_hold", "R", R);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("pi_prob_hold", "T_hold",
                                              T_hold);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("pi_prob_hold", "R", R);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("holdout_loglik", "T_hold",
                                              T_hold);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("holdout_loglik", "R", R);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (T_all * S * R) + (S * p * R) + S + S + S + C + C;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "zip_all_reg_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> phi_init =
         std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
           T_all, 
           std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(S, 
             Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(R, DUMMY_VAR__)));
      current_statement__ = 1;
      phi_init = in__.template read<
                   std::vector<
                     std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
                   T_all, S, R);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> beta =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(S, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(p, R,
             DUMMY_VAR__));
      current_statement__ = 2;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(S, p, R);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 3;
      tau_init = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, S);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 4;
      eta = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
              S);
      Eigen::Matrix<local_scalar_t__, -1, 1> bp_init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 5;
      bp_init = in__.template read_constrain_lub<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
                  lp__, S);
      Eigen::Matrix<local_scalar_t__, -1, 1> rho1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 6;
      rho1 = in__.template read_constrain_lub<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
               lp__, C);
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_sum =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 7;
      rho_sum = in__.template read_constrain_lub<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(rho1,
                  1, lp__, C);
      current_statement__ = 7;
      stan::math::check_matching_dims("constraint", "rho_sum", rho_sum,
                                      "lower", rho1);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> phi =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(S, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T_all, R,
             DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> reg =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(S, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T_train, R,
             DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, 1> bp =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(bp, stan::math::divide(bp_init, 2),
        "assigning variable bp");
      Eigen::Matrix<local_scalar_t__, -1, 1> tau =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(tau, stan::math::divide(tau_init, 2),
        "assigning variable tau");
      Eigen::Matrix<local_scalar_t__, -1, 1> rho2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(rho2, stan::math::subtract(rho_sum, rho1),
        "assigning variable rho2");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> cov_ar1 =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(S, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(p, p,
             DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> corr =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(C, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(R, R,
             DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, -1> lambda =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T_train, R,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, -1> pi_prob =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T_train, R,
           DUMMY_VAR__);
      current_statement__ = 19;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 17;
        stan::model::assign(corr,
          stan::math::add(
            stan::math::add(l3,
              stan::math::multiply(
                stan::model::rvalue(rho2, "rho2", stan::model::index_uni(c)),
                l2)),
            stan::math::multiply(
              stan::model::rvalue(rho1, "rho1", stan::model::index_uni(c)),
              l1)), "assigning variable corr", stan::model::index_uni(c));
      }
      current_statement__ = 30;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(cov_ar1,
          stan::math::add(
            stan::math::add(
              stan::math::add(
                stan::math::add(equal,
                  stan::math::multiply(
                    stan::model::rvalue(bp, "bp", stan::model::index_uni(s)),
                    bp_lin)),
                stan::math::multiply(
                  stan::math::pow(
                    stan::model::rvalue(bp, "bp", stan::model::index_uni(s)),
                    2), bp_square)),
              stan::math::multiply(
                stan::math::pow(
                  stan::model::rvalue(bp, "bp", stan::model::index_uni(s)),
                  3), bp_cube)),
            stan::math::multiply(
              stan::math::pow(
                stan::model::rvalue(bp, "bp", stan::model::index_uni(s)), 4),
              bp_quart)),
          "assigning variable cov_ar1", stan::model::index_uni(s));
        current_statement__ = 21;
        stan::model::assign(phi,
          stan::math::multiply(
            (1 / stan::model::rvalue(tau, "tau", stan::model::index_uni(s))),
            stan::model::rvalue(phi_init, "phi_init",
              stan::model::index_uni(1), stan::model::index_uni(s))),
          "assigning variable phi", stan::model::index_uni(s),
                                      stan::model::index_uni(1),
                                      stan::model::index_omni());
        current_statement__ = 24;
        for (int t = 2; t <= T_all; ++t) {
          current_statement__ = 22;
          stan::model::assign(phi,
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(eta, "eta", stan::model::index_uni(s)),
                stan::model::rvalue(
                  stan::model::deep_copy(
  stan::model::rvalue(phi, "phi", stan::model::index_uni(s))),
                  "FnDeepCopy__(phi[s])",
                  stan::model::index_uni((t - 1)), stan::model::index_omni())),
              stan::math::multiply(
                (1 /
                  stan::model::rvalue(tau, "tau", stan::model::index_uni(s))),
                stan::model::rvalue(phi_init, "phi_init",
                  stan::model::index_uni(t), stan::model::index_uni(s)))),
            "assigning variable phi", stan::model::index_uni(s),
                                        stan::model::index_uni(t),
                                        stan::model::index_omni());
        }
        current_statement__ = 28;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 25;
          stan::model::assign(reg,
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(X_train, "X_train",
                  stan::model::index_uni(r)),
                stan::model::rvalue(
                  stan::model::rvalue(beta, "beta", stan::model::index_uni(s)),
                  "beta[s]",
                  stan::model::index_omni(), stan::model::index_uni(r))),
              stan::model::rvalue(
                stan::model::rvalue(phi, "phi", stan::model::index_uni(s)),
                "phi[s]",
                stan::model::index_multi(idx_train_er),
                  stan::model::index_uni(r))),
            "assigning variable reg", stan::model::index_uni(s),
                                        stan::model::index_omni(),
                                        stan::model::index_uni(r));
          current_statement__ = 26;
          stan::model::assign(lambda,
            stan::math::add(
              stan::model::rvalue(
                stan::model::rvalue(reg, "reg", stan::model::index_uni(1)),
                "reg[1]",
                stan::model::index_omni(), stan::model::index_uni(r)),
              stan::model::rvalue(area_offset, "area_offset",
                stan::model::index_uni(r))),
            "assigning variable lambda", stan::model::index_omni(),
                                           stan::model::index_uni(r));
        }
      }
      current_statement__ = 31;
      stan::model::assign(pi_prob,
        stan::model::rvalue(reg, "reg", stan::model::index_uni(2)),
        "assigning variable pi_prob");
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "bp", bp, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 13;
      stan::math::check_cov_matrix(function__, "cov_ar1", cov_ar1);
      current_statement__ = 14;
      stan::math::check_corr_matrix(function__, "corr", corr);
      {
        current_statement__ = 52;
        lp_accum__.add(
          stan::math::uniform_lpdf<propto__>(stan::math::to_vector(bp_init),
            0, 1));
        current_statement__ = 53;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(stan::math::to_vector(eta), 3, 4));
        current_statement__ = 54;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(
            stan::math::to_vector(tau_init), 1));
        current_statement__ = 55;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(stan::math::to_vector(rho1), 3, 4));
        current_statement__ = 56;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(stan::math::to_vector(rho_sum), 8,
            2));
        current_statement__ = 63;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 57;
          lp_accum__.add(
            matnormal_lpdf<false>(
              stan::model::rvalue(beta, "beta", stan::model::index_uni(s)),
              stan::model::rvalue(cov_ar1, "cov_ar1",
                stan::model::index_uni(s)),
              stan::model::rvalue(corr, "corr", stan::model::index_uni(s)), pstream__));
          current_statement__ = 61;
          for (int t = 1; t <= T_all; ++t) {
            current_statement__ = 58;
            lp_accum__.add(
              (-.5 *
                stan::math::dot_self(
                  stan::math::subtract(
                    stan::model::rvalue(
                      stan::model::rvalue(phi_init, "phi_init",
  stan::model::index_uni(t), stan::model::index_uni(s)),
                      "phi_init[t, s]", stan::model::index_multi(node1)),
                    stan::model::rvalue(
                      stan::model::rvalue(phi_init, "phi_init",
  stan::model::index_uni(t), stan::model::index_uni(s)),
                      "phi_init[t, s]", stan::model::index_multi(node2))))));
            current_statement__ = 59;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::math::sum(
                  stan::model::rvalue(phi_init, "phi_init",
                    stan::model::index_uni(t), stan::model::index_uni(s))),
                0, (0.001 * R)));
          }
        }
        current_statement__ = 72;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 70;
          for (int t = 1; t <= T_train; ++t) {
            current_statement__ = 68;
            if (stan::math::logical_eq(
                  stan::model::rvalue(y_train_count, "y_train_count",
                    stan::model::index_uni(t), stan::model::index_uni(r)), 0)) {
              current_statement__ = 66;
              lp_accum__.add(
                stan::math::log_sum_exp(
                  stan::math::bernoulli_logit_lpmf<false>(1,
                    stan::model::rvalue(pi_prob, "pi_prob",
                      stan::model::index_uni(t), stan::model::index_uni(r))),
                  (stan::math::bernoulli_logit_lpmf<false>(0,
                     stan::model::rvalue(pi_prob, "pi_prob",
                       stan::model::index_uni(t), stan::model::index_uni(r)))
                    +
                    stan::math::poisson_log_lpmf<false>(
                      stan::model::rvalue(y_train_count, "y_train_count",
                        stan::model::index_uni(t), stan::model::index_uni(r)),
                      stan::model::rvalue(lambda, "lambda",
                        stan::model::index_uni(t), stan::model::index_uni(r))))));
            } else {
              current_statement__ = 64;
              lp_accum__.add(
                (stan::math::bernoulli_logit_lpmf<false>(0,
                   stan::model::rvalue(pi_prob, "pi_prob",
                     stan::model::index_uni(t), stan::model::index_uni(r))) +
                  stan::math::poisson_log_lpmf<false>(
                    stan::model::rvalue(y_train_count, "y_train_count",
                      stan::model::index_uni(t), stan::model::index_uni(r)),
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(t), stan::model::index_uni(r)))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "zip_all_reg_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> phi_init =
         std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(T_all, 
           std::vector<Eigen::Matrix<double, 1, -1>>(S, 
             Eigen::Matrix<double, 1, -1>::Constant(R,
               std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 1;
      phi_init = in__.template read<
                   std::vector<
                     std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
                   T_all, S, R);
      std::vector<Eigen::Matrix<double, -1, -1>> beta =
         std::vector<Eigen::Matrix<double, -1, -1>>(S, 
           Eigen::Matrix<double, -1, -1>::Constant(p, R,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(S, p, R);
      Eigen::Matrix<double, -1, 1> tau_init =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tau_init = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, S);
      Eigen::Matrix<double, -1, 1> eta =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      eta = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
              S);
      Eigen::Matrix<double, -1, 1> bp_init =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      bp_init = in__.template read_constrain_lub<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
                  lp__, S);
      Eigen::Matrix<double, -1, 1> rho1 =
         Eigen::Matrix<double, -1, 1>::Constant(C,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      rho1 = in__.template read_constrain_lub<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
               lp__, C);
      Eigen::Matrix<double, -1, 1> rho_sum =
         Eigen::Matrix<double, -1, 1>::Constant(C,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      rho_sum = in__.template read_constrain_lub<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(rho1,
                  1, lp__, C);
      current_statement__ = 7;
      stan::math::check_matching_dims("constraint", "rho_sum", rho_sum,
                                      "lower", rho1);
      std::vector<Eigen::Matrix<double, -1, -1>> phi =
         std::vector<Eigen::Matrix<double, -1, -1>>(S, 
           Eigen::Matrix<double, -1, -1>::Constant(T_all, R,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, -1>> reg =
         std::vector<Eigen::Matrix<double, -1, -1>>(S, 
           Eigen::Matrix<double, -1, -1>::Constant(T_train, R,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, 1> bp =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> tau =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> rho2 =
         Eigen::Matrix<double, -1, 1>::Constant(C,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, -1>> cov_ar1 =
         std::vector<Eigen::Matrix<double, -1, -1>>(S, 
           Eigen::Matrix<double, -1, -1>::Constant(p, p,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, -1>> corr =
         std::vector<Eigen::Matrix<double, -1, -1>>(C, 
           Eigen::Matrix<double, -1, -1>::Constant(R, R,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> lambda =
         Eigen::Matrix<double, -1, -1>::Constant(T_train, R,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> pi_prob =
         Eigen::Matrix<double, -1, -1>::Constant(T_train, R,
           std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= T_all; ++sym3__) {
            out__.write(phi_init[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            out__.write(
              stan::model::rvalue(beta, "beta",
                stan::model::index_uni(sym3__),
                  stan::model::index_uni(sym2__),
                  stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(tau_init);
      out__.write(eta);
      out__.write(bp_init);
      out__.write(rho1);
      out__.write(rho_sum);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      stan::model::assign(bp, stan::math::divide(bp_init, 2),
        "assigning variable bp");
      current_statement__ = 11;
      stan::model::assign(tau, stan::math::divide(tau_init, 2),
        "assigning variable tau");
      current_statement__ = 12;
      stan::model::assign(rho2, stan::math::subtract(rho_sum, rho1),
        "assigning variable rho2");
      current_statement__ = 19;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 17;
        stan::model::assign(corr,
          stan::math::add(
            stan::math::add(l3,
              stan::math::multiply(
                stan::model::rvalue(rho2, "rho2", stan::model::index_uni(c)),
                l2)),
            stan::math::multiply(
              stan::model::rvalue(rho1, "rho1", stan::model::index_uni(c)),
              l1)), "assigning variable corr", stan::model::index_uni(c));
      }
      current_statement__ = 30;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(cov_ar1,
          stan::math::add(
            stan::math::add(
              stan::math::add(
                stan::math::add(equal,
                  stan::math::multiply(
                    stan::model::rvalue(bp, "bp", stan::model::index_uni(s)),
                    bp_lin)),
                stan::math::multiply(
                  stan::math::pow(
                    stan::model::rvalue(bp, "bp", stan::model::index_uni(s)),
                    2), bp_square)),
              stan::math::multiply(
                stan::math::pow(
                  stan::model::rvalue(bp, "bp", stan::model::index_uni(s)),
                  3), bp_cube)),
            stan::math::multiply(
              stan::math::pow(
                stan::model::rvalue(bp, "bp", stan::model::index_uni(s)), 4),
              bp_quart)),
          "assigning variable cov_ar1", stan::model::index_uni(s));
        current_statement__ = 21;
        stan::model::assign(phi,
          stan::math::multiply(
            (1 / stan::model::rvalue(tau, "tau", stan::model::index_uni(s))),
            stan::model::rvalue(phi_init, "phi_init",
              stan::model::index_uni(1), stan::model::index_uni(s))),
          "assigning variable phi", stan::model::index_uni(s),
                                      stan::model::index_uni(1),
                                      stan::model::index_omni());
        current_statement__ = 24;
        for (int t = 2; t <= T_all; ++t) {
          current_statement__ = 22;
          stan::model::assign(phi,
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(eta, "eta", stan::model::index_uni(s)),
                stan::model::rvalue(
                  stan::model::deep_copy(
  stan::model::rvalue(phi, "phi", stan::model::index_uni(s))),
                  "FnDeepCopy__(phi[s])",
                  stan::model::index_uni((t - 1)), stan::model::index_omni())),
              stan::math::multiply(
                (1 /
                  stan::model::rvalue(tau, "tau", stan::model::index_uni(s))),
                stan::model::rvalue(phi_init, "phi_init",
                  stan::model::index_uni(t), stan::model::index_uni(s)))),
            "assigning variable phi", stan::model::index_uni(s),
                                        stan::model::index_uni(t),
                                        stan::model::index_omni());
        }
        current_statement__ = 28;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 25;
          stan::model::assign(reg,
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(X_train, "X_train",
                  stan::model::index_uni(r)),
                stan::model::rvalue(
                  stan::model::rvalue(beta, "beta", stan::model::index_uni(s)),
                  "beta[s]",
                  stan::model::index_omni(), stan::model::index_uni(r))),
              stan::model::rvalue(
                stan::model::rvalue(phi, "phi", stan::model::index_uni(s)),
                "phi[s]",
                stan::model::index_multi(idx_train_er),
                  stan::model::index_uni(r))),
            "assigning variable reg", stan::model::index_uni(s),
                                        stan::model::index_omni(),
                                        stan::model::index_uni(r));
          current_statement__ = 26;
          stan::model::assign(lambda,
            stan::math::add(
              stan::model::rvalue(
                stan::model::rvalue(reg, "reg", stan::model::index_uni(1)),
                "reg[1]",
                stan::model::index_omni(), stan::model::index_uni(r)),
              stan::model::rvalue(area_offset, "area_offset",
                stan::model::index_uni(r))),
            "assigning variable lambda", stan::model::index_omni(),
                                           stan::model::index_uni(r));
        }
      }
      current_statement__ = 31;
      stan::model::assign(pi_prob,
        stan::model::rvalue(reg, "reg", stan::model::index_uni(2)),
        "assigning variable pi_prob");
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "bp", bp, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 13;
      stan::math::check_cov_matrix(function__, "cov_ar1", cov_ar1);
      current_statement__ = 14;
      stan::math::check_corr_matrix(function__, "corr", corr);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              out__.write(
                stan::model::rvalue(phi, "phi",
                  stan::model::index_uni(sym3__),
                    stan::model::index_uni(sym2__),
                    stan::model::index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              out__.write(
                stan::model::rvalue(reg, "reg",
                  stan::model::index_uni(sym3__),
                    stan::model::index_uni(sym2__),
                    stan::model::index_uni(sym1__)));
            }
          }
        }
        out__.write(bp);
        out__.write(tau);
        out__.write(rho2);
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              out__.write(
                stan::model::rvalue(cov_ar1, "cov_ar1",
                  stan::model::index_uni(sym3__),
                    stan::model::index_uni(sym2__),
                    stan::model::index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= C; ++sym3__) {
              out__.write(
                stan::model::rvalue(corr, "corr",
                  stan::model::index_uni(sym3__),
                    stan::model::index_uni(sym2__),
                    stan::model::index_uni(sym1__)));
            }
          }
        }
        out__.write(lambda);
        out__.write(pi_prob);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, -1>> reg_full =
         std::vector<Eigen::Matrix<double, -1, -1>>(S, 
           Eigen::Matrix<double, -1, -1>::Constant(T_all, R,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> lambda_hold =
         Eigen::Matrix<double, -1, -1>::Constant(T_hold, R,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> pi_prob_hold =
         Eigen::Matrix<double, -1, -1>::Constant(T_hold, R,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> holdout_loglik =
         Eigen::Matrix<double, -1, -1>::Constant(T_hold, R,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 41;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 39;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 36;
          stan::model::assign(reg_full,
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(X_full, "X_full",
                  stan::model::index_uni(r)),
                stan::model::rvalue(
                  stan::model::rvalue(beta, "beta", stan::model::index_uni(s)),
                  "beta[s]",
                  stan::model::index_omni(), stan::model::index_uni(r))),
              stan::model::rvalue(
                stan::model::rvalue(phi, "phi", stan::model::index_uni(s)),
                "phi[s]",
                stan::model::index_omni(), stan::model::index_uni(r))),
            "assigning variable reg_full", stan::model::index_uni(s),
                                             stan::model::index_omni(),
                                             stan::model::index_uni(r));
          current_statement__ = 37;
          stan::model::assign(lambda_hold,
            stan::math::add(
              stan::model::rvalue(
                stan::model::rvalue(reg_full, "reg_full", stan::model::index_uni(1)),
                "reg_full[1]",
                stan::model::index_multi(idx_hold_er),
                  stan::model::index_uni(r)),
              stan::model::rvalue(area_offset, "area_offset",
                stan::model::index_uni(r))),
            "assigning variable lambda_hold", stan::model::index_omni(),
                                                stan::model::index_uni(r));
        }
      }
      current_statement__ = 42;
      stan::model::assign(pi_prob_hold,
        stan::model::rvalue(
          stan::model::rvalue(reg_full, "reg_full", stan::model::index_uni(2)),
          "reg_full[2]",
          stan::model::index_multi(idx_hold_er), stan::model::index_omni()),
        "assigning variable pi_prob_hold");
      current_statement__ = 51;
      for (int r = 1; r <= R; ++r) {
        current_statement__ = 49;
        for (int t = 1; t <= T_hold; ++t) {
          current_statement__ = 47;
          if (stan::math::logical_eq(
                stan::model::rvalue(y_hold_count, "y_hold_count",
                  stan::model::index_uni(t), stan::model::index_uni(r)), 0)) {
            current_statement__ = 45;
            stan::model::assign(holdout_loglik,
              stan::math::log_sum_exp(
                stan::math::bernoulli_logit_lpmf<false>(1,
                  stan::model::rvalue(pi_prob_hold, "pi_prob_hold",
                    stan::model::index_uni(t), stan::model::index_uni(r))),
                (stan::math::bernoulli_logit_lpmf<false>(0,
                   stan::model::rvalue(pi_prob_hold, "pi_prob_hold",
                     stan::model::index_uni(t), stan::model::index_uni(r))) +
                  stan::math::poisson_log_lpmf<false>(
                    stan::model::rvalue(y_hold_count, "y_hold_count",
                      stan::model::index_uni(t), stan::model::index_uni(r)),
                    stan::model::rvalue(lambda_hold, "lambda_hold",
                      stan::model::index_uni(t), stan::model::index_uni(r))))),
              "assigning variable holdout_loglik", stan::model::index_uni(t),
                                                     stan::model::index_uni(r));
          } else {
            current_statement__ = 43;
            stan::model::assign(holdout_loglik,
              (stan::math::bernoulli_logit_lpmf<false>(0,
                 stan::model::rvalue(pi_prob_hold, "pi_prob_hold",
                   stan::model::index_uni(t), stan::model::index_uni(r))) +
                stan::math::poisson_log_lpmf<false>(
                  stan::model::rvalue(y_hold_count, "y_hold_count",
                    stan::model::index_uni(t), stan::model::index_uni(r)),
                  stan::model::rvalue(lambda_hold, "lambda_hold",
                    stan::model::index_uni(t), stan::model::index_uni(r)))),
              "assigning variable holdout_loglik", stan::model::index_uni(t),
                                                     stan::model::index_uni(r));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            out__.write(
              stan::model::rvalue(reg_full, "reg_full",
                stan::model::index_uni(sym3__),
                  stan::model::index_uni(sym2__),
                  stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(lambda_hold);
      out__.write(pi_prob_hold);
      out__.write(holdout_loglik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> phi_init =
         std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
           T_all, 
           std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(S, 
             Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(R, DUMMY_VAR__)));
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= T_all; ++sym3__) {
            stan::model::assign(phi_init, in__.read<local_scalar_t__>(),
              "assigning variable phi_init", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(phi_init);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> beta =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(S, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(p, R,
             DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            stan::model::assign(beta, in__.read<local_scalar_t__>(),
              "assigning variable beta", stan::model::index_uni(sym3__),
                                           stan::model::index_uni(sym2__),
                                           stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        stan::model::assign(tau_init, in__.read<local_scalar_t__>(),
          "assigning variable tau_init", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, tau_init);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        stan::model::assign(eta, in__.read<local_scalar_t__>(),
          "assigning variable eta", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, eta);
      Eigen::Matrix<local_scalar_t__, -1, 1> bp_init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        stan::model::assign(bp_init, in__.read<local_scalar_t__>(),
          "assigning variable bp_init", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, bp_init);
      Eigen::Matrix<local_scalar_t__, -1, 1> rho1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        stan::model::assign(rho1, in__.read<local_scalar_t__>(),
          "assigning variable rho1", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, rho1);
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_sum =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        stan::model::assign(rho_sum, in__.read<local_scalar_t__>(),
          "assigning variable rho_sum", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(rho1, 1, rho_sum);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"phi_init", "beta", "tau_init", "eta",
      "bp_init", "rho1", "rho_sum", "phi", "reg", "bp", "tau", "rho2",
      "cov_ar1", "corr", "lambda", "pi_prob", "reg_full", "lambda_hold",
      "pi_prob_hold", "holdout_loglik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(T_all)
                                                                   ,
                                                                   static_cast<size_t>(S)
                                                                   ,
                                                                   static_cast<size_t>(R)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(S), static_cast<size_t>(p),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(S), static_cast<size_t>(T_all),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(S),
                          static_cast<size_t>(T_train),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(S), static_cast<size_t>(p),
                          static_cast<size_t>(p)},
      std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(R),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(T_train),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(T_train),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(S), static_cast<size_t>(T_all),
                          static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(T_hold), static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(T_hold), static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(T_hold), static_cast<size_t>(R)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= T_all; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "phi_init" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_init" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bp_init" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_sum" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "reg" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rho2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "cov_ar1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= C; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "corr" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pi_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "reg_full" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lambda_hold" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pi_prob_hold" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "holdout_loglik" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= T_all; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "phi_init" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_init" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bp_init" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_sum" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "reg" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rho2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= (p + ((p * (p - 1)) / 2)); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "cov_ar1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= ((R * (R - 1)) / 2); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "corr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pi_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "reg_full" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lambda_hold" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pi_prob_hold" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_hold; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "holdout_loglik" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"phi_init\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T_all) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "}}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"parameters\"},{\"name\":\"tau_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"bp_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"rho1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"rho_sum\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_all) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"reg\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"bp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cov_ar1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p) + ",\"cols\":" + std::to_string(p) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"corr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(R) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pi_prob\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reg_full\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_all) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"generated_quantities\"},{\"name\":\"lambda_hold\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_hold) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"generated_quantities\"},{\"name\":\"pi_prob_hold\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_hold) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"generated_quantities\"},{\"name\":\"holdout_loglik\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_hold) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"phi_init\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T_all) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "}}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"parameters\"},{\"name\":\"tau_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"bp_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"rho1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"rho_sum\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_all) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"reg\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"bp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cov_ar1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((p + ((p * (p - 1)) / 2))) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"corr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((R * (R - 1)) / 2)) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pi_prob\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reg_full\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_all) + ",\"cols\":" + std::to_string(R) + "}},\"block\":\"generated_quantities\"},{\"name\":\"lambda_hold\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_hold) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"generated_quantities\"},{\"name\":\"pi_prob_hold\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_hold) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"generated_quantities\"},{\"name\":\"holdout_loglik\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_hold) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((T_all * S) * R) + ((S * p) * R)) + S) + S) + S) + C) + C);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((((S * T_all) * R) + ((S * T_train) * R)) + S) + S) + C) +
       ((S * p) * p)) + ((C * R) * R)) + (T_train * R)) + (T_train * R));
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((S * T_all) * R) + (T_hold * R)) + (T_hold * R)) + (T_hold * R));
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((T_all * S) * R) + ((S * p) * R)) + S) + S) + S) + C) + C);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((((S * T_all) * R) + ((S * T_train) * R)) + S) + S) + C) +
       ((S * p) * p)) + ((C * R) * R)) + (T_train * R)) + (T_train * R));
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((S * T_all) * R) + (T_hold * R)) + (T_hold * R)) + (T_hold * R));
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"phi_init", "beta",
      "tau_init", "eta", "bp_init", "rho1", "rho_sum"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{(T_all * S * R)
       , (S * p * R), S, S, S, C, C};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = zip_all_reg_model_namespace::zip_all_reg_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return zip_all_reg_model_namespace::profiles__;
}

#endif


