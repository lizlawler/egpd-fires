
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace lognorm_sigma_cst_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 143> locations_array__ = 
{" (found before start of program)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 4, column 2 to column 48)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 5, column 2 to column 38)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 6, column 2 to column 20)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 7, column 2 to column 25)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 8, column 2 to column 31)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 9, column 2 to column 35)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 10, column 2 to column 32)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 11, column 2 to column 38)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 12, column 2 to column 22)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 15, column 2 to column 40)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 16, column 2 to column 23)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 17, column 2 to column 25)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 18, column 2 to column 33)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 19, column 2 to column 35)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 20, column 2 to column 29)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 21, column 2 to column 24)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 22, column 2 to column 22)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 24, column 2 to column 35)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 25, column 2 to column 35)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 27, column 2 to column 36)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 28, column 2 to line 29, column 56)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 32, column 2 to column 35)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 34, column 4 to line 35, column 40)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 33, column 21 to line 36, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 33, column 2 to line 36, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 40, column 4 to column 61)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 39, column 17 to line 41, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 39, column 2 to line 41, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 44, column 9 to column 17)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 44, column 2 to column 50)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 47, column 2 to column 26)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 50, column 2 to column 19)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 51, column 2 to column 28)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 54, column 2 to column 20)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 55, column 2 to column 23)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 58, column 2 to column 49)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 61, column 4 to column 70)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 62, column 4 to column 44)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 60, column 21 to line 63, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 60, column 2 to line 63, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 66, column 2 to column 29)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 70, column 4 to column 67)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 69, column 24 to line 71, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 69, column 2 to line 71, column 3)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 2, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 3, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 4, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 5, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 6, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 9, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 9, column 18, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 9, column 25, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 9, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 10, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 10, column 18, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 10, column 27, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 10, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 13, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 16, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 17, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 18, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 19, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 19, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 20, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 20, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 21, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 21, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 22, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 22, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 23, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 23, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 26, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 27, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 28, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 28, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 29, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 29, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 30, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 30, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 31, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 31, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 34, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 35, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 35, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 36, column 8, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 36, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 39, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 39, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 39, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 40, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 40, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 40, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 41, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 41, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 41, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 44, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 44, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 44, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 45, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 45, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 45, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 46, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 46, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 46, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 47, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 47, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 47, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 48, column 9, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 48, column 12, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../burns_data.stan', line 48, column 2, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 2, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 4, column 8 to column 16)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 5, column 8 to column 13)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 5, column 26 to column 27)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 6, column 9 to column 10)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 6, column 12 to column 13)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 15, column 8 to column 16)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 16, column 9 to column 14)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 16, column 16 to column 17)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 17, column 9 to column 16)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 17, column 18 to column 19)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 21, column 13 to column 14)",
 " (in 'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 22, column 14 to column 15)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 3, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 4, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 5, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 6, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 8, column 6, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 7, column 19, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 7, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 11, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 12, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 2, column 75, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 16, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 17, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 18, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 19, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 22, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan///../../twcrps_matnorm_fcns.stan', line 15, column 57, included from\n'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 2, column 0, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 5, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 6, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 7, column 4, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)",
 " (in 'full-model/fire-sims/burns/lognorm/stan//lognorm_fcns.stan', line 4, column 66, included from\n'full-model/fire-sims/burns/lognorm/stan/lognorm_sigma-cst.stan', line 1, column 0)"};

struct lognorm_trunc_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& y, const T1__& ymin, const T2__& mu,
             const T3__& sigma, std::ostream* pstream__) const;
};
struct twCRPS_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>>* = nullptr>
  stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__>
  operator()(const T0__& y, const T1__& forecast, const T2__& delta,
             const T3__& w_mean, const T4__& w_sd, std::ostream* pstream__) const;
};
struct matnormal_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_eigen_matrix_dynamic<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_eigen_matrix_dynamic<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>>
  operator()(const T0__& y, const T1__& cov, const T2__& corr,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
  stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__>
  twCRPS(const T0__& y, const T1__& forecast_arg__, const T2__& delta,
         const T3__& w_mean, const T4__& w_sd, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                                 T4__>;
    int current_statement__ = 0; 
    const auto& forecast = stan::math::to_ref(forecast_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ score = DUMMY_VAR__;
      local_scalar_t__ summand = DUMMY_VAR__;
      int N = std::numeric_limits<int>::min();
      current_statement__ = 125;
      N = stan::math::rows(forecast);
      current_statement__ = 126;
      summand = 0;
      current_statement__ = 129;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 127;
        summand = (summand +
                    (stan::math::pow(
                       (stan::model::rvalue(forecast, "forecast",
                          stan::model::index_uni(n)) -
                         stan::math::step(
                           (stan::model::rvalue(forecast, "forecast",
                              stan::model::index_uni(n)) - y))), 2) *
                      stan::math::normal_cdf(
                        stan::model::rvalue(forecast, "forecast",
                          stan::model::index_uni(n)), w_mean, w_sd)));
      }
      current_statement__ = 130;
      score = (summand * delta);
      current_statement__ = 131;
      return score;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>
  matnormal_lpdf(const T0__& y_arg__, const T1__& cov_arg__,
                 const T2__& corr_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& y = stan::math::to_ref(y_arg__);
    const auto& cov = stan::math::to_ref(cov_arg__);
    const auto& corr = stan::math::to_ref(corr_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lpdf = DUMMY_VAR__;
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 134;
      r = stan::math::rows(corr);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 135;
      p = stan::math::rows(cov);
      current_statement__ = 136;
      lpdf = ((((-((r * p) / 2) * stan::math::log((2 * stan::math::pi()))) -
                 ((p / 2) * stan::math::log_determinant(corr))) -
                ((r / 2) * stan::math::log_determinant(cov))) -
               (0.5 *
                 stan::math::trace(
                   stan::math::multiply(
                     stan::math::mdivide_right_spd(
                       stan::math::mdivide_left_spd(corr,
                         stan::math::transpose(y)), cov), y))));
      current_statement__ = 137;
      return lpdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  lognorm_trunc_lpdf(const T0__& y, const T1__& ymin, const T2__& mu,
                     const T3__& sigma, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ cst = DUMMY_VAR__;
      current_statement__ = 139;
      cst = stan::math::lognormal_lccdf(ymin, mu, sigma);
      local_scalar_t__ lpdf = DUMMY_VAR__;
      current_statement__ = 140;
      lpdf = stan::math::lognormal_lpdf<false>(y, mu, sigma);
      current_statement__ = 141;
      return (lpdf - cst);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
lognorm_trunc_lpdf_functor__::operator()(const T0__& y, const T1__& ymin,
                                         const T2__& mu, const T3__& sigma,
                                         std::ostream* pstream__)  const
{
  return lognorm_trunc_lpdf<propto__>(y, ymin, mu, sigma, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__>
twCRPS_functor__::operator()(const T0__& y, const T1__& forecast,
                             const T2__& delta, const T3__& w_mean,
                             const T4__& w_sd, std::ostream* pstream__) 
const
{
  return twCRPS(y, forecast, delta, w_mean, w_sd, pstream__);
}

template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>
matnormal_lpdf_functor__::operator()(const T0__& y, const T1__& cov,
                                     const T2__& corr,
                                     std::ostream* pstream__)  const
{
  return matnormal_lpdf<propto__>(y, cov, corr, pstream__);
}


class lognorm_sigma_cst_model final : public model_base_crtp<lognorm_sigma_cst_model> {

 private:
  int R;
  int p;
  int T_all;
  int T_train;
  int T_hold;
  std::vector<Eigen::Matrix<double, -1, -1>> X_full;
  std::vector<Eigen::Matrix<double, -1, -1>> X_train;
  double y_min;
  int N_tb_obs;
  int N_tb_mis;
  int N_tb_all;
  std::vector<double> y_train_obs;
  std::vector<int> ii_tb_obs;
  std::vector<int> ii_tb_mis;
  std::vector<int> ii_tb_all;
  std::vector<int> idx_train_er;
  int N_hold_obs;
  int N_hold_all;
  std::vector<int> ii_hold_obs;
  std::vector<int> ii_hold_all;
  std::vector<double> y_hold_obs;
  std::vector<int> idx_hold_er;
  int n_edges;
  std::vector<int> node1;
  std::vector<int> node2;
  Eigen::Matrix<double, -1, -1> l3_data__;
  Eigen::Matrix<double, -1, -1> l2_data__;
  Eigen::Matrix<double, -1, -1> l1_data__;
  Eigen::Matrix<double, -1, -1> equal_data__;
  Eigen::Matrix<double, -1, -1> bp_lin_data__;
  Eigen::Matrix<double, -1, -1> bp_square_data__;
  Eigen::Matrix<double, -1, -1> bp_cube_data__;
  Eigen::Matrix<double, -1, -1> bp_quart_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> l3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> l2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> l1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> equal{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_lin{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_square{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_cube{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> bp_quart{nullptr, 0, 0};
 
 public:
  ~lognorm_sigma_cst_model() { }
  
  inline std::string model_name() const final { return "lognorm_sigma_cst_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = --include-paths=full-model/fire-sims/burns/lognorm/stan/"};
  }
  
  
  lognorm_sigma_cst_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lognorm_sigma_cst_model_namespace::lognorm_sigma_cst_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 45;
      context__.validate_dims("data initialization","R","int",
           std::vector<size_t>{});
      R = std::numeric_limits<int>::min();
      
      
      current_statement__ = 45;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 46;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      
      
      current_statement__ = 46;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 47;
      context__.validate_dims("data initialization","T_all","int",
           std::vector<size_t>{});
      T_all = std::numeric_limits<int>::min();
      
      
      current_statement__ = 47;
      T_all = context__.vals_i("T_all")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "T_all", T_all, 1);
      current_statement__ = 48;
      context__.validate_dims("data initialization","T_train","int",
           std::vector<size_t>{});
      T_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 48;
      T_train = context__.vals_i("T_train")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "T_train", T_train, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","T_hold","int",
           std::vector<size_t>{});
      T_hold = std::numeric_limits<int>::min();
      
      
      current_statement__ = 49;
      T_hold = context__.vals_i("T_hold")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "T_hold", T_hold, 1);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("X_full", "R", R);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("X_full", "T_all", T_all);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("X_full", "p", p);
      current_statement__ = 53;
      context__.validate_dims("data initialization","X_full","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(T_all), static_cast<size_t>(p)});
      X_full = 
        std::vector<Eigen::Matrix<double, -1, -1>>(R, 
          Eigen::Matrix<double, -1, -1>::Constant(T_all, p,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_full_flat__;
        current_statement__ = 53;
        X_full_flat__ = context__.vals_r("X_full");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            current_statement__ = 53;
            for (int sym3__ = 1; sym3__ <= R; ++sym3__) {
              current_statement__ = 53;
              stan::model::assign(X_full, X_full_flat__[(pos__ - 1)],
                "assigning variable X_full", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 53;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("X_train", "R", R);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("X_train", "T_train", T_train);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("X_train", "p", p);
      current_statement__ = 57;
      context__.validate_dims("data initialization","X_train","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(T_train), static_cast<size_t>(p)});
      X_train = 
        std::vector<Eigen::Matrix<double, -1, -1>>(R, 
          Eigen::Matrix<double, -1, -1>::Constant(T_train, p,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_train_flat__;
        current_statement__ = 57;
        X_train_flat__ = context__.vals_r("X_train");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            current_statement__ = 57;
            for (int sym3__ = 1; sym3__ <= R; ++sym3__) {
              current_statement__ = 57;
              stan::model::assign(X_train, X_train_flat__[(pos__ - 1)],
                "assigning variable X_train", stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
              current_statement__ = 57;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 58;
      context__.validate_dims("data initialization","y_min","double",
           std::vector<size_t>{});
      y_min = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 58;
      y_min = context__.vals_r("y_min")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization","N_tb_obs","int",
           std::vector<size_t>{});
      N_tb_obs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 59;
      N_tb_obs = context__.vals_i("N_tb_obs")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "N_tb_obs", N_tb_obs, 1);
      current_statement__ = 60;
      context__.validate_dims("data initialization","N_tb_mis","int",
           std::vector<size_t>{});
      N_tb_mis = std::numeric_limits<int>::min();
      
      
      current_statement__ = 60;
      N_tb_mis = context__.vals_i("N_tb_mis")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "N_tb_mis", N_tb_mis, 1);
      current_statement__ = 61;
      context__.validate_dims("data initialization","N_tb_all","int",
           std::vector<size_t>{});
      N_tb_all = std::numeric_limits<int>::min();
      
      
      current_statement__ = 61;
      N_tb_all = context__.vals_i("N_tb_all")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "N_tb_all", N_tb_all, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("y_train_obs", "N_tb_obs",
                                              N_tb_obs);
      current_statement__ = 63;
      context__.validate_dims("data initialization","y_train_obs","double",
           std::vector<size_t>{static_cast<size_t>(N_tb_obs)});
      y_train_obs = 
        std::vector<double>(N_tb_obs, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 63;
      y_train_obs = context__.vals_r("y_train_obs");
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "y_train_obs",
                                            y_train_obs, y_min);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("ii_tb_obs", "N_tb_obs",
                                              N_tb_obs);
      current_statement__ = 65;
      context__.validate_dims("data initialization","ii_tb_obs","int",
           std::vector<size_t>{static_cast<size_t>(N_tb_obs)});
      ii_tb_obs = 
        std::vector<int>(N_tb_obs, std::numeric_limits<int>::min());
      
      
      current_statement__ = 65;
      ii_tb_obs = context__.vals_i("ii_tb_obs");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "ii_tb_obs", ii_tb_obs,
                                            1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("ii_tb_mis", "N_tb_mis",
                                              N_tb_mis);
      current_statement__ = 67;
      context__.validate_dims("data initialization","ii_tb_mis","int",
           std::vector<size_t>{static_cast<size_t>(N_tb_mis)});
      ii_tb_mis = 
        std::vector<int>(N_tb_mis, std::numeric_limits<int>::min());
      
      
      current_statement__ = 67;
      ii_tb_mis = context__.vals_i("ii_tb_mis");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "ii_tb_mis", ii_tb_mis,
                                            1);
      current_statement__ = 67;
      stan::math::check_less_or_equal(function__, "ii_tb_mis", ii_tb_mis,
                                         N_tb_all);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("ii_tb_all", "N_tb_all",
                                              N_tb_all);
      current_statement__ = 69;
      context__.validate_dims("data initialization","ii_tb_all","int",
           std::vector<size_t>{static_cast<size_t>(N_tb_all)});
      ii_tb_all = 
        std::vector<int>(N_tb_all, std::numeric_limits<int>::min());
      
      
      current_statement__ = 69;
      ii_tb_all = context__.vals_i("ii_tb_all");
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "ii_tb_all", ii_tb_all,
                                            1);
      current_statement__ = 69;
      stan::math::check_less_or_equal(function__, "ii_tb_all", ii_tb_all,
                                         N_tb_all);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("idx_train_er", "T_train",
                                              T_train);
      current_statement__ = 71;
      context__.validate_dims("data initialization","idx_train_er","int",
           std::vector<size_t>{static_cast<size_t>(T_train)});
      idx_train_er = 
        std::vector<int>(T_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 71;
      idx_train_er = context__.vals_i("idx_train_er");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "idx_train_er",
                                            idx_train_er, 1);
      current_statement__ = 72;
      context__.validate_dims("data initialization","N_hold_obs","int",
           std::vector<size_t>{});
      N_hold_obs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 72;
      N_hold_obs = context__.vals_i("N_hold_obs")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "N_hold_obs",
                                            N_hold_obs, 1);
      current_statement__ = 73;
      context__.validate_dims("data initialization","N_hold_all","int",
           std::vector<size_t>{});
      N_hold_all = std::numeric_limits<int>::min();
      
      
      current_statement__ = 73;
      N_hold_all = context__.vals_i("N_hold_all")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "N_hold_all",
                                            N_hold_all, 1);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("ii_hold_obs", "N_hold_obs",
                                              N_hold_obs);
      current_statement__ = 75;
      context__.validate_dims("data initialization","ii_hold_obs","int",
           std::vector<size_t>{static_cast<size_t>(N_hold_obs)});
      ii_hold_obs = 
        std::vector<int>(N_hold_obs, std::numeric_limits<int>::min());
      
      
      current_statement__ = 75;
      ii_hold_obs = context__.vals_i("ii_hold_obs");
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "ii_hold_obs",
                                            ii_hold_obs, 1);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("ii_hold_all", "N_hold_all",
                                              N_hold_all);
      current_statement__ = 77;
      context__.validate_dims("data initialization","ii_hold_all","int",
           std::vector<size_t>{static_cast<size_t>(N_hold_all)});
      ii_hold_all = 
        std::vector<int>(N_hold_all, std::numeric_limits<int>::min());
      
      
      current_statement__ = 77;
      ii_hold_all = context__.vals_i("ii_hold_all");
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "ii_hold_all",
                                            ii_hold_all, 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("y_hold_obs", "N_hold_obs",
                                              N_hold_obs);
      current_statement__ = 79;
      context__.validate_dims("data initialization","y_hold_obs","double",
           std::vector<size_t>{static_cast<size_t>(N_hold_obs)});
      y_hold_obs = 
        std::vector<double>(N_hold_obs, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 79;
      y_hold_obs = context__.vals_r("y_hold_obs");
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "y_hold_obs",
                                            y_hold_obs, 1);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("idx_hold_er", "T_hold", T_hold);
      current_statement__ = 81;
      context__.validate_dims("data initialization","idx_hold_er","int",
           std::vector<size_t>{static_cast<size_t>(T_hold)});
      idx_hold_er = 
        std::vector<int>(T_hold, std::numeric_limits<int>::min());
      
      
      current_statement__ = 81;
      idx_hold_er = context__.vals_i("idx_hold_er");
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "idx_hold_er",
                                            idx_hold_er, 1);
      current_statement__ = 82;
      context__.validate_dims("data initialization","n_edges","int",
           std::vector<size_t>{});
      n_edges = std::numeric_limits<int>::min();
      
      
      current_statement__ = 82;
      n_edges = context__.vals_i("n_edges")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "n_edges", n_edges, 0);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("node1", "n_edges", n_edges);
      current_statement__ = 84;
      context__.validate_dims("data initialization","node1","int",
           std::vector<size_t>{static_cast<size_t>(n_edges)});
      node1 = std::vector<int>(n_edges, std::numeric_limits<int>::min());
      
      
      current_statement__ = 84;
      node1 = context__.vals_i("node1");
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "node1", node1, 1);
      current_statement__ = 84;
      stan::math::check_less_or_equal(function__, "node1", node1, R);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("node2", "n_edges", n_edges);
      current_statement__ = 86;
      context__.validate_dims("data initialization","node2","int",
           std::vector<size_t>{static_cast<size_t>(n_edges)});
      node2 = std::vector<int>(n_edges, std::numeric_limits<int>::min());
      
      
      current_statement__ = 86;
      node2 = context__.vals_i("node2");
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "node2", node2, 1);
      current_statement__ = 86;
      stan::math::check_less_or_equal(function__, "node2", node2, R);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("l3", "R", R);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("l3", "R", R);
      current_statement__ = 89;
      context__.validate_dims("data initialization","l3","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(R)});
      l3_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(R, R,
          std::numeric_limits<double>::quiet_NaN());
      new (&l3) Eigen::Map<Eigen::Matrix<double, -1, -1>>(l3_data__.data(), R, R);
        
      
      {
        std::vector<local_scalar_t__> l3_flat__;
        current_statement__ = 89;
        l3_flat__ = context__.vals_r("l3");
        current_statement__ = 89;
        pos__ = 1;
        current_statement__ = 89;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 89;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 89;
            stan::model::assign(l3, l3_flat__[(pos__ - 1)],
              "assigning variable l3", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 89;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 90;
      stan::math::validate_non_negative_index("l2", "R", R);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("l2", "R", R);
      current_statement__ = 92;
      context__.validate_dims("data initialization","l2","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(R)});
      l2_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(R, R,
          std::numeric_limits<double>::quiet_NaN());
      new (&l2) Eigen::Map<Eigen::Matrix<double, -1, -1>>(l2_data__.data(), R, R);
        
      
      {
        std::vector<local_scalar_t__> l2_flat__;
        current_statement__ = 92;
        l2_flat__ = context__.vals_r("l2");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 92;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 92;
            stan::model::assign(l2, l2_flat__[(pos__ - 1)],
              "assigning variable l2", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 92;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 93;
      stan::math::validate_non_negative_index("l1", "R", R);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("l1", "R", R);
      current_statement__ = 95;
      context__.validate_dims("data initialization","l1","double",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(R)});
      l1_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(R, R,
          std::numeric_limits<double>::quiet_NaN());
      new (&l1) Eigen::Map<Eigen::Matrix<double, -1, -1>>(l1_data__.data(), R, R);
        
      
      {
        std::vector<local_scalar_t__> l1_flat__;
        current_statement__ = 95;
        l1_flat__ = context__.vals_r("l1");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 95;
            stan::model::assign(l1, l1_flat__[(pos__ - 1)],
              "assigning variable l1", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 95;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 96;
      stan::math::validate_non_negative_index("equal", "p", p);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("equal", "p", p);
      current_statement__ = 98;
      context__.validate_dims("data initialization","equal","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      equal_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&equal) Eigen::Map<Eigen::Matrix<double, -1, -1>>(equal_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> equal_flat__;
        current_statement__ = 98;
        equal_flat__ = context__.vals_r("equal");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 98;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 98;
            stan::model::assign(equal, equal_flat__[(pos__ - 1)],
              "assigning variable equal", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 98;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 99;
      stan::math::validate_non_negative_index("bp_lin", "p", p);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("bp_lin", "p", p);
      current_statement__ = 101;
      context__.validate_dims("data initialization","bp_lin","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_lin_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_lin) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_lin_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_lin_flat__;
        current_statement__ = 101;
        bp_lin_flat__ = context__.vals_r("bp_lin");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 101;
            stan::model::assign(bp_lin, bp_lin_flat__[(pos__ - 1)],
              "assigning variable bp_lin", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 101;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 102;
      stan::math::validate_non_negative_index("bp_square", "p", p);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("bp_square", "p", p);
      current_statement__ = 104;
      context__.validate_dims("data initialization","bp_square","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_square_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_square) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_square_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_square_flat__;
        current_statement__ = 104;
        bp_square_flat__ = context__.vals_r("bp_square");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 104;
            stan::model::assign(bp_square, bp_square_flat__[(pos__ - 1)],
              "assigning variable bp_square", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 104;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 105;
      stan::math::validate_non_negative_index("bp_cube", "p", p);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("bp_cube", "p", p);
      current_statement__ = 107;
      context__.validate_dims("data initialization","bp_cube","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_cube_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_cube) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_cube_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_cube_flat__;
        current_statement__ = 107;
        bp_cube_flat__ = context__.vals_r("bp_cube");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 107;
            stan::model::assign(bp_cube, bp_cube_flat__[(pos__ - 1)],
              "assigning variable bp_cube", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
            current_statement__ = 107;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("bp_quart", "p", p);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("bp_quart", "p", p);
      current_statement__ = 110;
      context__.validate_dims("data initialization","bp_quart","double",
           std::vector<size_t>{static_cast<size_t>(p),
            static_cast<size_t>(p)});
      bp_quart_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(p, p,
          std::numeric_limits<double>::quiet_NaN());
      new (&bp_quart) Eigen::Map<Eigen::Matrix<double, -1, -1>>(bp_quart_data__.data(), p, p);
        
      
      {
        std::vector<local_scalar_t__> bp_quart_flat__;
        current_statement__ = 110;
        bp_quart_flat__ = context__.vals_r("bp_quart");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            current_statement__ = 110;
            stan::model::assign(bp_quart, bp_quart_flat__[(pos__ - 1)],
              "assigning variable bp_quart", stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
            current_statement__ = 110;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::validate_non_negative_index("y_train_mis", "N_tb_mis",
                                              N_tb_mis);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("phi_init", "T_all", T_all);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("phi_init", "R", R);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("beta", "p", p);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("beta", "R", R);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("y_train", "N_tb_all", N_tb_all);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("phi", "T_all", T_all);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("phi", "R", R);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("reg", "T_train", T_train);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("reg", "R", R);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("cov_ar1", "p", p);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("cov_ar1", "p", p);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("corr", "R", R);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("corr", "R", R);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_tb_mis + (T_all * R) + (p * R) + 1 + 1 + 1 + 1 + 
      1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lognorm_sigma_cst_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> y_train_mis =
         std::vector<local_scalar_t__>(N_tb_mis, DUMMY_VAR__);
      current_statement__ = 1;
      y_train_mis = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(y_min, lp__,
                      N_tb_mis);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> phi_init =
         std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(T_all, 
           Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(R, DUMMY_VAR__));
      current_statement__ = 2;
      phi_init = in__.template read<
                   std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
                   T_all, R);
      Eigen::Matrix<local_scalar_t__, -1, -1> beta =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(p, R, DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(p,
               R);
      local_scalar_t__ tau_init = DUMMY_VAR__;
      current_statement__ = 4;
      tau_init = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 5;
      eta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      local_scalar_t__ bp_init = DUMMY_VAR__;
      current_statement__ = 6;
      bp_init = in__.template read_constrain_lub<local_scalar_t__, 
                  jacobian__>(0, 1, lp__);
      local_scalar_t__ rho1 = DUMMY_VAR__;
      current_statement__ = 7;
      rho1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
               0, 1, lp__);
      local_scalar_t__ rho_sum = DUMMY_VAR__;
      current_statement__ = 8;
      rho_sum = in__.template read_constrain_lub<local_scalar_t__, 
                  jacobian__>(rho1, 1, lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 9;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<local_scalar_t__> y_train =
         std::vector<local_scalar_t__>(N_tb_all, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T_all, R,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, -1> reg =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T_train, R,
           DUMMY_VAR__);
      local_scalar_t__ bp = DUMMY_VAR__;
      current_statement__ = 13;
      bp = (bp_init / 2);
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 14;
      tau = (tau_init / 2);
      local_scalar_t__ rho2 = DUMMY_VAR__;
      current_statement__ = 15;
      rho2 = (rho_sum - rho1);
      Eigen::Matrix<local_scalar_t__, -1, -1> cov_ar1 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(p, p, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, -1> corr =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(R, R, DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(y_train, y_train_obs,
        "assigning variable y_train", stan::model::index_multi(ii_tb_obs));
      current_statement__ = 19;
      stan::model::assign(y_train, y_train_mis,
        "assigning variable y_train", stan::model::index_multi(ii_tb_mis));
      current_statement__ = 20;
      stan::model::assign(corr,
        stan::math::add(stan::math::add(l3, stan::math::multiply(rho2, l2)),
          stan::math::multiply(rho1, l1)), "assigning variable corr");
      current_statement__ = 21;
      stan::model::assign(cov_ar1,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::math::add(equal, stan::math::multiply(bp, bp_lin)),
              stan::math::multiply(stan::math::pow(bp, 2), bp_square)),
            stan::math::multiply(stan::math::pow(bp, 3), bp_cube)),
          stan::math::multiply(stan::math::pow(bp, 4), bp_quart)),
        "assigning variable cov_ar1");
      current_statement__ = 22;
      stan::model::assign(phi,
        stan::math::multiply((1 / tau),
          stan::model::rvalue(phi_init, "phi_init",
            stan::model::index_uni(1))),
        "assigning variable phi", stan::model::index_uni(1),
                                    stan::model::index_omni());
      current_statement__ = 25;
      for (int t = 2; t <= T_all; ++t) {
        current_statement__ = 23;
        stan::model::assign(phi,
          stan::math::add(
            stan::math::multiply(eta,
              stan::model::deep_copy(
                stan::model::rvalue(phi, "phi",
                  stan::model::index_uni((t - 1)), stan::model::index_omni()))),
            stan::math::multiply((1 / tau),
              stan::model::rvalue(phi_init, "phi_init",
                stan::model::index_uni(t)))),
          "assigning variable phi", stan::model::index_uni(t),
                                      stan::model::index_omni());
      }
      current_statement__ = 28;
      for (int r = 1; r <= R; ++r) {
        current_statement__ = 26;
        stan::model::assign(reg,
          stan::math::add(
            stan::math::multiply(
              stan::model::rvalue(X_train, "X_train",
                stan::model::index_uni(r)),
              stan::model::rvalue(beta, "beta",
                stan::model::index_omni(), stan::model::index_uni(r))),
            stan::model::rvalue(phi, "phi",
              stan::model::index_multi(idx_train_er),
                stan::model::index_uni(r))),
          "assigning variable reg", stan::model::index_omni(),
                                      stan::model::index_uni(r));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "y_train", y_train, 1);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "bp", bp, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 16;
      stan::math::check_cov_matrix(function__, "cov_ar1", cov_ar1);
      current_statement__ = 17;
      stan::math::check_corr_matrix(function__, "corr", corr);
      {
        current_statement__ = 29;
        stan::math::validate_non_negative_index("mu", "N_tb_all", N_tb_all);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_tb_all,
             DUMMY_VAR__);
        current_statement__ = 30;
        stan::model::assign(mu,
          stan::model::rvalue(stan::math::to_vector(reg), "to_vector(reg)",
            stan::model::index_multi(ii_tb_all)), "assigning variable mu");
        current_statement__ = 31;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(bp_init, 0, 1));
        current_statement__ = 32;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(eta, 3, 4));
        current_statement__ = 33;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(tau_init, 1));
        current_statement__ = 34;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(rho1, 3, 4));
        current_statement__ = 35;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(rho_sum, 8, 2));
        current_statement__ = 36;
        lp_accum__.add(matnormal_lpdf<false>(beta, cov_ar1, corr, pstream__));
        current_statement__ = 40;
        for (int t = 1; t <= T_all; ++t) {
          current_statement__ = 37;
          lp_accum__.add(
            (-.5 *
              stan::math::dot_self(
                stan::math::subtract(
                  stan::model::rvalue(
                    stan::model::rvalue(phi_init, "phi_init", stan::model::index_uni(t)),
                    "phi_init[t]", stan::model::index_multi(node1)),
                  stan::model::rvalue(
                    stan::model::rvalue(phi_init, "phi_init", stan::model::index_uni(t)),
                    "phi_init[t]", stan::model::index_multi(node2))))));
          current_statement__ = 38;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::math::sum(
                stan::model::rvalue(phi_init, "phi_init",
                  stan::model::index_uni(t))), 0, (0.001 * R)));
        }
        current_statement__ = 41;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma, 4, 0, 1));
        current_statement__ = 44;
        for (int n = 1; n <= N_tb_all; ++n) {
          current_statement__ = 42;
          lp_accum__.add(
            lognorm_trunc_lpdf<false>(
              stan::model::rvalue(y_train, "y_train",
                stan::model::index_uni(n)), y_min,
              stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
              sigma, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lognorm_sigma_cst_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> y_train_mis =
         std::vector<double>(N_tb_mis, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      y_train_mis = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(y_min, lp__,
                      N_tb_mis);
      std::vector<Eigen::Matrix<double, 1, -1>> phi_init =
         std::vector<Eigen::Matrix<double, 1, -1>>(T_all, 
           Eigen::Matrix<double, 1, -1>::Constant(R,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      phi_init = in__.template read<
                   std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
                   T_all, R);
      Eigen::Matrix<double, -1, -1> beta =
         Eigen::Matrix<double, -1, -1>::Constant(p, R,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(p,
               R);
      double tau_init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      tau_init = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      eta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      double bp_init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      bp_init = in__.template read_constrain_lub<local_scalar_t__, 
                  jacobian__>(0, 1, lp__);
      double rho1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      rho1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
               0, 1, lp__);
      double rho_sum = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      rho_sum = in__.template read_constrain_lub<local_scalar_t__, 
                  jacobian__>(rho1, 1, lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<double> y_train =
         std::vector<double>(N_tb_all, 
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> phi =
         Eigen::Matrix<double, -1, -1>::Constant(T_all, R,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> reg =
         Eigen::Matrix<double, -1, -1>::Constant(T_train, R,
           std::numeric_limits<double>::quiet_NaN());
      double bp = std::numeric_limits<double>::quiet_NaN();
      double tau = std::numeric_limits<double>::quiet_NaN();
      double rho2 = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, -1> cov_ar1 =
         Eigen::Matrix<double, -1, -1>::Constant(p, p,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> corr =
         Eigen::Matrix<double, -1, -1>::Constant(R, R,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(y_train_mis);
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
          out__.write(phi_init[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(beta);
      out__.write(tau_init);
      out__.write(eta);
      out__.write(bp_init);
      out__.write(rho1);
      out__.write(rho_sum);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      bp = (bp_init / 2);
      current_statement__ = 14;
      tau = (tau_init / 2);
      current_statement__ = 15;
      rho2 = (rho_sum - rho1);
      current_statement__ = 18;
      stan::model::assign(y_train, y_train_obs,
        "assigning variable y_train", stan::model::index_multi(ii_tb_obs));
      current_statement__ = 19;
      stan::model::assign(y_train, y_train_mis,
        "assigning variable y_train", stan::model::index_multi(ii_tb_mis));
      current_statement__ = 20;
      stan::model::assign(corr,
        stan::math::add(stan::math::add(l3, stan::math::multiply(rho2, l2)),
          stan::math::multiply(rho1, l1)), "assigning variable corr");
      current_statement__ = 21;
      stan::model::assign(cov_ar1,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::math::add(equal, stan::math::multiply(bp, bp_lin)),
              stan::math::multiply(stan::math::pow(bp, 2), bp_square)),
            stan::math::multiply(stan::math::pow(bp, 3), bp_cube)),
          stan::math::multiply(stan::math::pow(bp, 4), bp_quart)),
        "assigning variable cov_ar1");
      current_statement__ = 22;
      stan::model::assign(phi,
        stan::math::multiply((1 / tau),
          stan::model::rvalue(phi_init, "phi_init",
            stan::model::index_uni(1))),
        "assigning variable phi", stan::model::index_uni(1),
                                    stan::model::index_omni());
      current_statement__ = 25;
      for (int t = 2; t <= T_all; ++t) {
        current_statement__ = 23;
        stan::model::assign(phi,
          stan::math::add(
            stan::math::multiply(eta,
              stan::model::deep_copy(
                stan::model::rvalue(phi, "phi",
                  stan::model::index_uni((t - 1)), stan::model::index_omni()))),
            stan::math::multiply((1 / tau),
              stan::model::rvalue(phi_init, "phi_init",
                stan::model::index_uni(t)))),
          "assigning variable phi", stan::model::index_uni(t),
                                      stan::model::index_omni());
      }
      current_statement__ = 28;
      for (int r = 1; r <= R; ++r) {
        current_statement__ = 26;
        stan::model::assign(reg,
          stan::math::add(
            stan::math::multiply(
              stan::model::rvalue(X_train, "X_train",
                stan::model::index_uni(r)),
              stan::model::rvalue(beta, "beta",
                stan::model::index_omni(), stan::model::index_uni(r))),
            stan::model::rvalue(phi, "phi",
              stan::model::index_multi(idx_train_er),
                stan::model::index_uni(r))),
          "assigning variable reg", stan::model::index_omni(),
                                      stan::model::index_uni(r));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "y_train", y_train, 1);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "bp", bp, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 16;
      stan::math::check_cov_matrix(function__, "cov_ar1", cov_ar1);
      current_statement__ = 17;
      stan::math::check_corr_matrix(function__, "corr", corr);
      if (emit_transformed_parameters__) {
        out__.write(y_train);
        out__.write(phi);
        out__.write(reg);
        out__.write(bp);
        out__.write(tau);
        out__.write(rho2);
        out__.write(cov_ar1);
        out__.write(corr);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> y_train_mis =
         std::vector<local_scalar_t__>(N_tb_mis, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_tb_mis; ++sym1__) {
        y_train_mis[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(y_min, y_train_mis);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> phi_init =
         std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(T_all, 
           Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(R, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
          stan::model::assign(phi_init, in__.read<local_scalar_t__>(),
            "assigning variable phi_init", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
        }
      }
      out__.write(phi_init);
      Eigen::Matrix<local_scalar_t__, -1, -1> beta =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(p, R, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          stan::model::assign(beta, in__.read<local_scalar_t__>(),
            "assigning variable beta", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta);
      local_scalar_t__ tau_init = DUMMY_VAR__;
      tau_init = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_init);
      local_scalar_t__ eta = DUMMY_VAR__;
      eta = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, eta);
      local_scalar_t__ bp_init = DUMMY_VAR__;
      bp_init = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, bp_init);
      local_scalar_t__ rho1 = DUMMY_VAR__;
      rho1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho1);
      local_scalar_t__ rho_sum = DUMMY_VAR__;
      rho_sum = in__.read<local_scalar_t__>();
      out__.write_free_lub(rho1, 1, rho_sum);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y_train_mis", "phi_init", "beta",
      "tau_init", "eta", "bp_init", "rho1", "rho_sum", "sigma", "y_train",
      "phi", "reg", "bp", "tau", "rho2", "cov_ar1", "corr"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_tb_mis)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(T_all), static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(R)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_tb_all)},
      std::vector<size_t>{static_cast<size_t>(T_all), static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(T_train),
                          static_cast<size_t>(R)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(p)},
      std::vector<size_t>{static_cast<size_t>(R), static_cast<size_t>(R)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_tb_mis; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_train_mis" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "phi_init" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "tau_init");
    param_names__.emplace_back(std::string() + "eta");
    param_names__.emplace_back(std::string() + "bp_init");
    param_names__.emplace_back(std::string() + "rho1");
    param_names__.emplace_back(std::string() + "rho_sum");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_tb_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_train" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "reg" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "bp");
      param_names__.emplace_back(std::string() + "tau");
      param_names__.emplace_back(std::string() + "rho2");
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "cov_ar1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "corr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_tb_mis; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_train_mis" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "phi_init" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "tau_init");
    param_names__.emplace_back(std::string() + "eta");
    param_names__.emplace_back(std::string() + "bp_init");
    param_names__.emplace_back(std::string() + "rho1");
    param_names__.emplace_back(std::string() + "rho_sum");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_tb_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_train" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_all; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "reg" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "bp");
      param_names__.emplace_back(std::string() + "tau");
      param_names__.emplace_back(std::string() + "rho2");
      for (int sym1__ = 1; sym1__ <= (p + ((p * (p - 1)) / 2)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cov_ar1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= ((R * (R - 1)) / 2); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "corr" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y_train_mis\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tb_mis) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi_init\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T_all) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"parameters\"},{\"name\":\"tau_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bp_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_sum\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tb_all) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_all) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reg\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"bp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rho2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"cov_ar1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p) + ",\"cols\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"corr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(R) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y_train_mis\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tb_mis) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi_init\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T_all) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"parameters\"},{\"name\":\"tau_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bp_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_sum\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tb_all) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_all) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reg\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T_train) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"bp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rho2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"cov_ar1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((p + ((p * (p - 1)) / 2))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"corr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((R * (R - 1)) / 2)) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((N_tb_mis + (T_all * R)) + (p * R)) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((N_tb_all + (T_all * R)) + (T_train * R)) + 1) + 1) + 1) + (p * p)) +
    (R * R));
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((N_tb_mis + (T_all * R)) + (p * R)) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((N_tb_all + (T_all * R)) + (T_train * R)) + 1) + 1) + 1) + (p * p)) +
    (R * R));
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 9> names__{"y_train_mis", "phi_init",
      "beta", "tau_init", "eta", "bp_init", "rho1", "rho_sum", "sigma"};
      const std::array<Eigen::Index, 9> constrain_param_sizes__{N_tb_mis,
       (T_all * R), (p * R), 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = lognorm_sigma_cst_model_namespace::lognorm_sigma_cst_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lognorm_sigma_cst_model_namespace::profiles__;
}

#endif


